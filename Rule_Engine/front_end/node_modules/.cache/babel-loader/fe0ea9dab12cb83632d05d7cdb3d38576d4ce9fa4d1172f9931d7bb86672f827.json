{"ast":null,"code":"var _jsxFileName = \"D:\\\\sachin\\\\React_practice\\\\rule-engine\\\\src\\\\components\\\\EvulateRules.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EvaluateRule = () => {\n  _s();\n  const [ruleId, setRuleId] = useState('');\n  const [data, setData] = useState('');\n  const [message, setMessage] = useState('');\n  const [result, setResult] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const parsedData = JSON.parse(data); // Assuming input is a valid JSON string\n      const response = await axios.post('/api/evaluateRule', {\n        rule_id: ruleId,\n        data: parsedData\n      });\n      setMessage(response.data.message);\n      setResult(response.data.result);\n    } catch (error) {\n      setMessage(`Error: ${error.response.data.error}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Evaluate a Rule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Rule ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ruleId,\n          onChange: e => setRuleId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Data (JSON format):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: data,\n          onChange: e => setData(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Evaluate Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }, this), result && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(result, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(EvaluateRule, \"YwL+y+fozFrgVrnH0latM6efh90=\");\n_c = EvaluateRule;\nexport default EvaluateRule;\nvar _c;\n$RefreshReg$(_c, \"EvaluateRule\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","EvaluateRule","_s","ruleId","setRuleId","data","setData","message","setMessage","result","setResult","handleSubmit","e","preventDefault","parsedData","JSON","parse","response","post","rule_id","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","stringify","_c","$RefreshReg$"],"sources":["D:/sachin/React_practice/rule-engine/src/components/EvulateRules.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst EvaluateRule = () => {\r\n  const [ruleId, setRuleId] = useState('');\r\n  const [data, setData] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [result, setResult] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const parsedData = JSON.parse(data); // Assuming input is a valid JSON string\r\n      const response = await axios.post('/api/evaluateRule', {\r\n        rule_id: ruleId,\r\n        data: parsedData,\r\n      });\r\n      setMessage(response.data.message);\r\n      setResult(response.data.result);\r\n    } catch (error) {\r\n      setMessage(`Error: ${error.response.data.error}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Evaluate a Rule</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Rule ID:</label>\r\n          <input type=\"text\" value={ruleId} onChange={(e) => setRuleId(e.target.value)} />\r\n        </div>\r\n        <div>\r\n          <label>Data (JSON format):</label>\r\n          <textarea value={data} onChange={(e) => setData(e.target.value)}></textarea>\r\n        </div>\r\n        <button type=\"submit\">Evaluate Rule</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n      {result && <pre>{JSON.stringify(result, null, 2)}</pre>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EvaluateRule;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}