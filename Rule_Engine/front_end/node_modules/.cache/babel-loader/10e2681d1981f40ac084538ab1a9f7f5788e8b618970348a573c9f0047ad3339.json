{"ast":null,"code":"var _jsxFileName = \"D:\\\\sachin\\\\React_practice\\\\rule-engine\\\\src\\\\components\\\\EvulateRules.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport RulesService from '../services/RulesService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rulesService = new RulesService();\nconst EvaluateRule = () => {\n  _s();\n  const [ruleId, setRuleId] = useState('');\n  const [data, setData] = useState('');\n  const [message, setMessage] = useState('');\n  const [result, setResult] = useState(null);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const parsedData = JSON.parse(data); // Assuming input is a valid JSON string\n      const response = await rulesService.evaluateRule(ruleId, parsedData); // Change from combineRules to evaluateRule\n      setMessage(response.message); // Adjust based on your API response structure\n      setResult(response.result); // Adjust based on your API response structure\n    } catch (error) {\n      // Handle potential parsing errors and API errors\n      if (error instanceof SyntaxError) {\n        setMessage('Error: Invalid JSON format');\n      } else {\n        var _error$response, _error$response$data;\n        setMessage(`Error: ${((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'An error occurred'}`);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Evaluate Rule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Rule ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: ruleId,\n          onChange: e => setRuleId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Data (JSON format):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: data,\n          onChange: e => setData(e.target.value),\n          rows: \"4\",\n          cols: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Evaluate Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 19\n    }, this), result && /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(result, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(EvaluateRule, \"YwL+y+fozFrgVrnH0latM6efh90=\");\n_c = EvaluateRule;\nexport default EvaluateRule;\nvar _c;\n$RefreshReg$(_c, \"EvaluateRule\");","map":{"version":3,"names":["React","useState","RulesService","jsxDEV","_jsxDEV","rulesService","EvaluateRule","_s","ruleId","setRuleId","data","setData","message","setMessage","result","setResult","handleSubmit","e","preventDefault","parsedData","JSON","parse","response","evaluateRule","error","SyntaxError","_error$response","_error$response$data","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","rows","cols","stringify","_c","$RefreshReg$"],"sources":["D:/sachin/React_practice/rule-engine/src/components/EvulateRules.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport RulesService from '../services/RulesService';\r\n\r\nconst rulesService = new RulesService();\r\n\r\nconst EvaluateRule = () => {\r\n  const [ruleId, setRuleId] = useState('');\r\n  const [data, setData] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [result, setResult] = useState(null);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const parsedData = JSON.parse(data); // Assuming input is a valid JSON string\r\n      const response = await rulesService.evaluateRule(ruleId, parsedData); // Change from combineRules to evaluateRule\r\n      setMessage(response.message); // Adjust based on your API response structure\r\n      setResult(response.result); // Adjust based on your API response structure\r\n    } catch (error) {\r\n      // Handle potential parsing errors and API errors\r\n      if (error instanceof SyntaxError) {\r\n        setMessage('Error: Invalid JSON format');\r\n      } else {\r\n        setMessage(`Error: ${error.response?.data?.error || 'An error occurred'}`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Evaluate Rule</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Rule ID:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={ruleId}\r\n            onChange={(e) => setRuleId(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Data (JSON format):</label>\r\n          <textarea\r\n            value={data}\r\n            onChange={(e) => setData(e.target.value)}\r\n            rows=\"4\"\r\n            cols=\"50\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Evaluate Rule</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n      {result && <pre>{JSON.stringify(result, null, 2)}</pre>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EvaluateRule;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}