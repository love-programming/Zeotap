{"ast":null,"code":"// src/services/RulesService.js\nimport AxiosService from './AxiosService';\nconst axiosService = new AxiosService();\nconst config = require('../configrations/Configration');\nexport default class RulesService {\n  // Method to create a new rule\n  async createRule(ruleName, ruleString) {\n    const response = await axiosService.post(config.createURL, {\n      rule_name: ruleName,\n      rule_string: ruleString\n    });\n    return response; // Directly return the response as it's already formatted\n  }\n\n  // Method to combine rules\n  async combineRules(ruleIds) {\n    const response = await axiosService.post1(config.combineURL, {\n      rule_ids: ruleIds\n    });\n    return response; // Return combined rules response\n  }\n\n  // Method to evaluate a rule\n  async evaluateRule(ruleId, data) {\n    const response = await axiosService.post2(config.evluteURL, {\n      rule_id: ruleId,\n      data\n    });\n    return response; // Return evaluation result response\n  }\n  async updaterules(ruleId, ruleName, ruleString) {\n    try {\n      const response = await this.put(config.updateURL, {\n        rule_id: ruleId,\n        rule_name: ruleName,\n        rule_string: ruleString // Sending updated data\n      });\n      return response.data; // Return the updated rules response\n    } catch (error) {\n      console.error('Error while updating rules:', error);\n      throw error; // Re-throw error to handle it outside this method\n    }\n  }\n}","map":{"version":3,"names":["AxiosService","axiosService","config","require","RulesService","createRule","ruleName","ruleString","response","post","createURL","rule_name","rule_string","combineRules","ruleIds","post1","combineURL","rule_ids","evaluateRule","ruleId","data","post2","evluteURL","rule_id","updaterules","put","updateURL","error","console"],"sources":["D:/sachin/React_practice/rule-engine/src/services/RulesService.js"],"sourcesContent":["// src/services/RulesService.js\r\nimport AxiosService from './AxiosService';\r\n\r\nconst axiosService = new AxiosService();\r\nconst config = require('../configrations/Configration');\r\n\r\nexport default class RulesService {\r\n    // Method to create a new rule\r\n    async createRule(ruleName, ruleString) {\r\n        const response = await axiosService.post(config.createURL, {\r\n            rule_name: ruleName,\r\n            rule_string: ruleString,\r\n        });\r\n        return response; // Directly return the response as it's already formatted\r\n    }\r\n\r\n    // Method to combine rules\r\n    async combineRules(ruleIds) {\r\n        const response = await axiosService.post1(config.combineURL, {\r\n            rule_ids: ruleIds,\r\n        });\r\n        return response; // Return combined rules response\r\n    }\r\n\r\n    // Method to evaluate a rule\r\n    async evaluateRule(ruleId, data) {\r\n        const response = await axiosService.post2(config.evluteURL, {\r\n            rule_id: ruleId,\r\n            data,\r\n        });\r\n        return response; // Return evaluation result response\r\n    }\r\n    async updaterules(ruleId, ruleName, ruleString) {\r\n        try {\r\n          const response = await this.put(config.updateURL, {\r\n            rule_id: ruleId,\r\n            rule_name: ruleName,\r\n            rule_string: ruleString, // Sending updated data\r\n          });\r\n          return response.data; // Return the updated rules response\r\n        } catch (error) {\r\n          console.error('Error while updating rules:', error);\r\n          throw error; // Re-throw error to handle it outside this method\r\n        }\r\n      }\r\n    \r\n    \r\n}\r\n"],"mappings":"AAAA;AACA,OAAOA,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,YAAY,GAAG,IAAID,YAAY,CAAC,CAAC;AACvC,MAAME,MAAM,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AAEvD,eAAe,MAAMC,YAAY,CAAC;EAC9B;EACA,MAAMC,UAAUA,CAACC,QAAQ,EAAEC,UAAU,EAAE;IACnC,MAAMC,QAAQ,GAAG,MAAMP,YAAY,CAACQ,IAAI,CAACP,MAAM,CAACQ,SAAS,EAAE;MACvDC,SAAS,EAAEL,QAAQ;MACnBM,WAAW,EAAEL;IACjB,CAAC,CAAC;IACF,OAAOC,QAAQ,CAAC,CAAC;EACrB;;EAEA;EACA,MAAMK,YAAYA,CAACC,OAAO,EAAE;IACxB,MAAMN,QAAQ,GAAG,MAAMP,YAAY,CAACc,KAAK,CAACb,MAAM,CAACc,UAAU,EAAE;MACzDC,QAAQ,EAAEH;IACd,CAAC,CAAC;IACF,OAAON,QAAQ,CAAC,CAAC;EACrB;;EAEA;EACA,MAAMU,YAAYA,CAACC,MAAM,EAAEC,IAAI,EAAE;IAC7B,MAAMZ,QAAQ,GAAG,MAAMP,YAAY,CAACoB,KAAK,CAACnB,MAAM,CAACoB,SAAS,EAAE;MACxDC,OAAO,EAAEJ,MAAM;MACfC;IACJ,CAAC,CAAC;IACF,OAAOZ,QAAQ,CAAC,CAAC;EACrB;EACA,MAAMgB,WAAWA,CAACL,MAAM,EAAEb,QAAQ,EAAEC,UAAU,EAAE;IAC5C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACiB,GAAG,CAACvB,MAAM,CAACwB,SAAS,EAAE;QAChDH,OAAO,EAAEJ,MAAM;QACfR,SAAS,EAAEL,QAAQ;QACnBM,WAAW,EAAEL,UAAU,CAAE;MAC3B,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACY,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK,CAAC,CAAC;IACf;EACF;AAGN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}